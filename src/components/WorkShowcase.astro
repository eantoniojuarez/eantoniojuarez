---
import img1 from '../assets/conceptArtVid.png';
import img2 from '../assets/conceptArtSC.png';
import img3 from'../assets/pageSample.png';
import img4 from '../assets/sample4.png';
import img5 from '../assets/sample5.gif';

import '../styles/global.css';

export interface ImageItem {
  src: string;
  alt: string;
  caption?: string;
  row: number;
  size: string;
  captionLocation: string;
  fontSize?: string;
  captionWidth?: string;
  imageWidth?: string;
  imgMobileWidth?: string;
}

export interface Props {
  images: ImageItem[];
}

const { images } = Astro.props;


---

<section class="image-showcase">
  {Array.from(new Set(images.map(img => img.row))).map(row => (
    <div class="image-row">
      {images.filter(img => img.row === row).map(image => (
        <div class={`image-block ${image.captionLocation}`}>
          {image.caption && image.captionLocation === 'above' && (
            <div class="caption center" style={`font-size: clamp(0.6rem, ${image.fontSize || '0.55vw'}, 3rem); width: ${image.captionWidth || '100%'}`}>
              {image.caption && image.caption.split('\n\n').map(p => <p>{p.split('\n').map((line, i) => <>{line}{i < p.split('\n').length - 1 && <br />}</>)}</p>)}
            </div>
          )}
          {image.caption && image.captionLocation === 'left' && (
            <div
              class="caption long"
              style={`font-size: clamp(0.6rem, ${image.fontSize || '0.55vw'}, 1.75rem); width: ${image.captionWidth || '20vw'}`}
            >
              {image.caption && image.caption.split('\n\n').map(p => <p>{p.split('\n').map((line, i) => <>{line}{i < p.split('\n').length - 1 && <br />}</>)}</p>)}
            </div>
          )}

          <div class={`image-wrapper ${image.size}`} style={`--image-width: ${ image.imageWidth || '100%'}; --image-mobile-width: ${ image.imgMobileWidth || '100%'};`}>
            <img src={image.src} alt={image.alt} />
          </div>



          {image.caption && image.captionLocation === 'right' && (
            <div
              class="caption long"
              style={`font-size: clamp(0.6rem, ${image.fontSize || '0.55vw'}, 1.75rem); width: ${image.captionWidth || '20vw'}`}
            >
              {image.caption && image.caption.split('\n\n').map(p => <p>{p.split('\n').map((line, i) => <>{line}{i < p.split('\n').length - 1 && <br />}</>)}</p>)}
            </div>
          )}

          {image.caption && image.captionLocation === 'center' && (
            <div class="caption center" style={`font-size: clamp(0.6rem, ${image.fontSize || '0.55vw'}, 3rem); width: ${image.captionWidth || '100%'}`}>
              {image.caption && image.caption.split('\n\n').map(p => <p>{p.split('\n').map((line, i) => <>{line}{i < p.split('\n').length - 1 && <br />}</>)}</p>)}
            </div>
          )}
        </div>
      ))}
    </div>
  ))}
</section>

<style>

.image-showcase {

width: 100%;
padding: .5rem;
display: flex;
flex-direction: column;
gap: 1rem;
box-sizing: border-box;


}
.image-block {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  gap: 0.25vw;
  flex: fit-content;

}

.image-row {
  display: flex;
  flex-wrap: nowrap;
  gap: .5vw;
  justify-content: flex-start;
  align-items: stretch;

}
  


.image-block.left,
.image-block.right {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: center;
}

.image-wrapper {
  background: #0f172a;
  border: 1px solid #334155;
  border-radius: 0.5rem;
  padding: 0.5rem;
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  flex: 1 1 auto;
  flex-shrink: 0;
  max-width: var(--image-width, 100%);
  
}

.image-wrapper img {
  width: 100%;
  height: auto;
  object-fit: contain;
  display: block;
}

.caption {
  text-align: center;
  font-size: 0.55vw;
  line-height: 1.4rem;
  color: #150e16;

  padding-left:.75rem;
  padding-right:.75rem;
  width: 100%;
}


.caption.long {
  display: flex;
  flex-direction: column;
  justify-content: center;
  height: 100%;
  overflow-y: auto;
  max-height: var(--img-height, 60vh);        /* Constrain to row height */
  padding: 0.75vw;

  color: #150e16;
  font-size: clamp(0.75rem, 0.55vw + 0.5rem, 1.25rem);
  box-sizing: border-box;
  word-break: break-word;
  flex-shrink: 1;
}

.caption.long p {
  padding-left: .5rem;
  padding-right:.5rem;
  margin: 0;
  font-size: inherit;
  color: inherit;
  text-align: center;
  line-height: 1.4;

  max-height: 100%;
  overflow: auto;         /* Scroll if needed */
  word-break: break-word;
}

.caption.center {

  color: #150e16;
  padding: 0.75rem;
  text-align: center;
  width: 30rem;
  max-width: 100%;
  box-sizing: border-box;
  align-self: center; /* ensure it aligns with the image */
}

@media (max-width: 768px) {
  .image-row{
  
  }
  .image-block,
  .image-block.left,
  .image-block.right {
    flex-direction: column;
    align-items: center;
 
    width: auto;         /* allow size to fit content */
    max-width: 100%;     /* prevent overflow */
    flex: 0 1 auto;      /* don't stretch or shrink */
  }

  .image-wrapper {
    
    max-width: calc(var(--image-mobile-width, 100%) - 1rem);
  
  }

  .caption {
    width: 100% !important;
  }
  .caption.long {

    max-width: var(--img-width, 60vh);
    max-height: 500PX;
  }
}
</style>

<script>
function syncImageHeights() {
  document.querySelectorAll('.image-block').forEach(block => {
    const img = block.querySelector('img') as HTMLElement | null;
    const caption = block.querySelector('.caption.long') as HTMLElement | null;
    let body = window.innerWidth;

    if (img && caption) {
      const height = img.clientHeight;
      const width = img.clientWidth;
      caption.style.setProperty('--img-height', `${height}px`);
      caption.style.setProperty('--img-width', `${width}px`);
    }
    if (img){
      img.style.setProperty('--screenWidth', `${body}px`)
    }
  
  });
}
  window.addEventListener('load', syncImageHeights);
  window.addEventListener('resize', () => {
    setTimeout(syncImageHeights, 150);
  });
</script>